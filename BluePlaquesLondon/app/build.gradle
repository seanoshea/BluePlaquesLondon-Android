buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.15.2'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
repositories {
    maven { url 'https://maven.fabric.io/public' }
}
apply plugin: 'pmd'
apply plugin: 'findbugs'

android {
    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        config {
        }
        production {
            keyAlias 'production'
            keyPassword 'password_here'
            storeFile file('~/production.keystore')
            storePassword 'password_here'
        }
    }
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    lintOptions {
        abortOnError true
        lintConfig file("${project.rootDir}/config/lint/lint.xml")
        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }
    defaultConfig {
        applicationId "com.upwardsnorthwards.blueplaqueslondon"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 8
        versionName "1.5"
        //noinspection GroovyAssignabilityCheck
        signingConfig signingConfigs.config
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.production
        }
    }
    productFlavors {
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        //noinspection GroovyAssignabilityCheck
        xml {
            destination "$project.buildDir/reports/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
}

task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        //noinspection GroovyAssignabilityCheck
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
}

check.doLast {
    project.tasks.getByName("pmd").execute()
    project.tasks.getByName("findbugs").execute()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.github.hotchemi:android-rate:0.5.0'
    compile 'com.squareup:otto:1.3.8'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile 'com.android.support:support-annotations:23.1.1'
}
